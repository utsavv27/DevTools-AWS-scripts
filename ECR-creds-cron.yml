apiVersion: v1
kind: Secret
metadata:
  name: ecr-registry-helper-secrets
  namespace: health-check
stringData:
  AWS_SECRET_ACCESS_KEY: "****"
  AWS_ACCESS_KEY_ID: "****"
  AWS_ACCOUNT: "***"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecr-registry-helper-cm
  namespace: health-check
data:
  AWS_REGION: "us-west-2"
  DOCKER_SECRET_NAME: ecr-secret
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: ecr-registry-helper
  namespace: health-check
spec:
  schedule: "0 6 * * *"
  successfulJobsHistoryLimit: 3
  suspend: false
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: sa-health-check
          containers:
          - name: ecr-registry-helper
            image: odaniait/aws-kubectl:latest
            imagePullPolicy: IfNotPresent
            envFrom:
              - secretRef:
                  name: ecr-registry-helper-secrets
              - configMapRef:
                  name: ecr-registry-helper-cm
            command:
              - /bin/sh
              - -c
              - |-
                ECR_TOKEN=`aws ecr get-login-password --region ${AWS_REGION}`
                DOCKER_SECRET_NAME= $DOCKER_SECRET_NAME # Replace with your secret name

                # Get a list of all namespaces
                namespaces=$(kubectl get namespaces -o jsonpath='{.items[*].metadata.name}')

                for namespace in $namespaces; do
                    # Delete the existing secret if it exists
                    kubectl delete secret --ignore-not-found $DOCKER_SECRET_NAME -n $namespace
                    
                    # Create the new Docker secret in the current namespace
                    kubectl create secret docker-registry $DOCKER_SECRET_NAME \
                        --docker-server=https://${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com \
                        --docker-username=AWS \
                        --docker-password="${ECR_TOKEN}" \
                        --namespace=$namespace
                    
                    echo "Secret '$DOCKER_SECRET_NAME' was successfully updated in namespace '$namespace' at $(date)"
                done

          restartPolicy: Never
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sa-health-check
  namespace: health-check
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-role-full-access-to-secrets
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["delete", "create"]
- apiGroups: [""]
  resources: ["namespaces"]  # Added permission to list namespaces
  verbs: ["get", "list"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: health-check-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: sa-health-check
  namespace: health-check
roleRef:
  kind: ClusterRole
  name: cluster-role-full-access-to-secrets
  apiGroup: ""
---